#pragma once

//============================================================================
//		## image ## (앞으로 계속 업데이트)
//============================================================================
class image
{
public:
	enum IMAGE_LOAD_KIND
	{
		LOAD_RESOURCE = 0,	//리소스로 로드
		LOAD_FILE,			//파일로 로드
		LOAD_EMPTY,			//빈비트맵 로딩
		LOAD_END
	};

	typedef struct tagImage
	{
		DWORD resID;		//리소스 ID
		HDC hMemDC;			//메모리 DC
		HBITMAP hBit;		//비트맵
		HBITMAP hOBit;		//올드비트맵
		float x;			//이미지 x좌표
		float y;			//이미지 y좌표
		int width;			//이미지 가로크기
		int height;			//이미지 세로크기
		int currentFrameX;	//현재 프레임 x
		int currentFrameY;	//현재 프레임 y
		int maxFrameX;		//최대 x프레임 갯수
		int maxFrameY;		//최대 y프리임 갯수
		int frameWidth;		//1프레임 가로길이
		int frameHeight;	//1프레임 세로길이
		BYTE loadType;		//이미지 로드타입

		tagImage()
		{
			resID = 0;
			hMemDC = NULL;
			hBit = NULL;
			hOBit = NULL;
			x = 0;
			y = 0;
			width = 0;
			height = 0;
			currentFrameX = 0;
			currentFrameY = 0;
			maxFrameX = 0;
			maxFrameY = 0;
			frameWidth = 0;
			frameHeight = 0;
			width = 0;
			height = 0;
			loadType = LOAD_RESOURCE;
		}
	} IMAGE_INFO, *LPIMAGE_INFO;
private:
	LPIMAGE_INFO _imageInfo;	//이미지 정보
	CHAR* _fileName;			//이미지 이름
	BOOL _isTrans;				//배경색 없앨거냐?(마ㅣ젠타)
	COLORREF _transColor;		//배경색 없앨 RGB (마젠타 = RGB(255, 0, 255))

	image* _copyImage;			//복사할 이미지정보

	BLENDFUNCTION _blendFunc;	//알파블렌드 기능
	LPIMAGE_INFO _blendImage;	//알파블렌드 이미지
public:
	image();
	~image();

	//빈 비트맵으로 초기화
	HRESULT init(int width, int height);
	//이미지 리소스로 초기화(사용안함)
	HRESULT init(const DWORD resID, int width, int height, BOOL isTrans = FALSE, COLORREF transColor = RGB(255, 0, 255));
	//이미지 파일로 초기화(주 사용)
	HRESULT init(const char* fileName, int width, int height, BOOL isTrans = FALSE, COLORREF transColor = RGB(255, 0, 255));
	HRESULT init(const char* fileName, float x, float y, int width, int height, BOOL isTrans = FALSE, COLORREF transColor = RGB(255, 0, 255));
	//프레임 이미지 파일로 초기화
	HRESULT init(const char* fileName, int width, int height, int frameX, int frameY, BOOL isTrans = FALSE, COLORREF transColor = RGB(255, 0, 255));
	HRESULT init(const char* fileName, float x, float y, int width, int height, int frameX, int frameY, BOOL isTrans = FALSE, COLORREF transColor = RGB(255, 0, 255));

	//알파블렌드 초기화
	HRESULT initForAlphaBlend(void);

	//투명키 셋팅
	void setTransColor(BOOL isTrans, COLORREF transColor);

	//해제
	void release(void);

//============================================================================
//		## 일반렌더 ##
//============================================================================
	//렌더(내가 지정한 좌표에 이미지를 출력한다)
	void render(HDC hdc, int destX = 0, int destY = 0);
	void render(HDC hdc, int destX, int destY, int sourX, int sourY, int sourWidth, int sourHeight);

//============================================================================
//		## 알파렌더 ##
//============================================================================
	void alphaRender(HDC hdc, int destX, int destY, BYTE alpha);
	void alphaRender(HDC hdc, int destX, int destY, int sourX, int sourY, int sourWidth, int sourHeight, BYTE alpha);

//============================================================================
//		## 프레임렌더 ##
//============================================================================
	void frameRender(HDC hdc, int destX, int destY);
	void frameRender(HDC hdc, int destX, int destY, int currentFrameX, int currentFrameY);

//============================================================================
//		## 프레임알파렌더 ##
//============================================================================
	void frameAlphaRender(HDC hdc, int destX, int destY, BYTE alpha);
	void frameAlphaRender(HDC hdc, int destX, int destY, int currentFrameX, int currentFrameY, BYTE alpha);

//============================================================================
//		## 루프렌더 ##
//============================================================================
	void loopRender(HDC hdc, const LPRECT drawArea, int offsetX, int offsetY);

//============================================================================
//		## 루프알파렌더 ##
//============================================================================
	void loopAlphaRender(HDC hdc, const LPRECT drawArea, int offsetX, int offsetY, BYTE alpha);

//============================================================================
//		## 복사알파렌더 ##
//============================================================================
	void copyAlphaRender(HDC hdc, int destX, int destY, image* image, BYTE alpha);

//============================================================================
//		## 인라인함수 ## (인라인 함수등 - 겟터, 셋터)
//============================================================================

	//DC 얻기
	inline HDC getMemDC(void){ return _imageInfo->hMemDC; }

	//이미지 x좌표
	inline float getX(void){ return _imageInfo->x; }
	inline void setX(float x){ _imageInfo->x = x; }

	//이미지 y좌표
	inline float getY(void){ return _imageInfo->y; }
	inline void setY(float y){ _imageInfo->y = y; }

	//이미지 센터좌표
	inline float setCenter(float x, float y)
	{
		_imageInfo->x = x - (_imageInfo->width / 2);
		_imageInfo->y = y - (_imageInfo->height / 2);
	}

	//이미지 가로, 세로크기
	inline int getWidth(void){ return _imageInfo->width; }
	inline int getHeight(void) { return _imageInfo->height; }

	//바운딩박스 (충돌용)
	inline RECT getBoundingBox(void)
	{
		RECT rc = RectMakeCenter(_imageInfo->x, _imageInfo->y, _imageInfo->width, _imageInfo->height);
		return rc;
	}

	//프레임 x
	inline int getFrameX(void){ return _imageInfo->currentFrameX; }
	inline void setFrameX(float frameX)
	{
		_imageInfo->currentFrameX = frameX;
		if (frameX > _imageInfo->maxFrameX)
		{
			_imageInfo->currentFrameX = _imageInfo->maxFrameX;
		}
	}

	//프레임 y
	inline int getFrameY(void){ return _imageInfo->currentFrameY; }
	inline void setFrameY(float frameY)
	{
		_imageInfo->currentFrameY = frameY;
		if (frameY > _imageInfo->maxFrameY)
		{
			_imageInfo->currentFrameY = _imageInfo->maxFrameY;
		}
	}

	//1프레임 가로, 세로 크기
	inline int getFrameWidth(void) { return _imageInfo->frameWidth; }
	inline int getFrameHeight(void) { return _imageInfo->frameHeight; }

	//맥스 프레임 x, y
	inline int getMaxFrameX(void){ return _imageInfo->maxFrameX; }
	inline int getMaxFrameY(void){ return _imageInfo->maxFrameY; }
};

